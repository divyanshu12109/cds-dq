def config(x):
    
    name = []
    for i in x:
        if any(str(item).replace(" ", "").isalpha() for item in x[i]):
            name.append(1)
        else:
            name.append(0)
            
    email = []
    pat = "^[a-zA-Z0-9-_]+@[a-zA-Z0-9]+.[a-z]{1,3}$"
    for i in x:
        if any(re.match(pat,str(item)) for item in x[i]):
            email.append(1)
        email.append(0)
        
    phone = []
    pat = "^[6-9][0-9]{9}$"
    for i in x:
        if any(re.match(pat,str(item)) for item in x[i]):
            phone.append(1)
        phone.append(0)
        
    dates = []
    for i in x:
        if any(item is date for item in x[i]):
            dates.append(1)
        else:
            dates.append(0)
        
    num = []
    pat = "[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?$"
    for i in x:
        if any(re.search(pat,str(item)) is not None for item in x[i]):
            num.append(1)
        else:
            num.append(0)
            
    t = []
    for i in x:
        if any(item is date for item in x[i]):
            datesf = []
            for j in x[i]:
                if int(parse(j).strftime('%d/%m/%Y')[3:5]) <= 12 and parse(j).strftime('%d/%m/%Y')[3:5] in ['01', '03', '05', '07', '08', '10', '12'] and int(parse(j).strftime('%d/%m/%Y')[0:2]) <= 31 and len(parse(j).strftime('%d/%m/%Y')[6:10]) == 4:
                    datesf.append(1)
                elif int(parse(j).strftime('%d/%m/%Y')[3:5]) <= 12 and parse(j).strftime('%d/%m/%Y')[3:5] in ['04', '06', '07', '09', '11'] and int(parse(j).strftime('%d/%m/%Y')[0:2]) <= 30 and len(parse(j).strftime('%d/%m/%Y')[6:10]) == 4:
                    datesf.append(1)
                elif parse(j).strftime('%d/%m/%Y')[3:5] == '02' and calendar.isleap(int(parse(j).strftime('%d/%m/%Y')[6:10])) and int(parse(j).strftime('%d/%m/%Y')[0:2]) <= 29 and len(parse(j).strftime('%d/%m/%Y')[6:10]) == 4:
                    datesf.append(1)
                elif parse(j).strftime('%d/%m/%Y')[3:5] == '02' and calendar.isleap(int(parse(j).strftime('%d/%m/%Y')[6:10])) == False and int(parse(j).strftime('%d/%m/%Y')[0:2]) <= 28 and len(parse(j).strftime('%d/%m/%Y')[6:10]) == 4:
                    datesf.append(1)
                else:
                    datesf.append(0)

            if sum(datesf) == len(x):
                t.append(1)
            else:
                t.append(0)
        else:
            t.append(0)
            
    nullable = []
    for i in x:
        if any(item == "NULL" for item in x[i]):
            nullable.append(1)
        nullable.append(0)
        
    spec = []
    pat = re.compile("[$&+,:;=?@#|'<>.\-^*()%!_]")
    for i in x:
        if any(pat.search(str(item)) is not None and type(item) == str for item in x[i]):
            spec.append(1)
        elif any(pat.search(str(item)) is None and type(item) == str for item in x[i]):
            spec.append(0)
        else:
            spec.append(0)
    
    dup = []
    for i in x:
        if x.duplicated(keep=False).sum() > 1:
            dup.append(1)
        dup.append(0)
    
    columns = []
    for i in x:
        columns.append(i)
        
    rules = ['COLUMNS', 'IS_NAME', 'IS_EMAIL', 'IS_MOBILE', 'IS_DATE', 'IS_NUMBER', 'DATE_FORMAT', 'NULL_REPLACE', 'SPEC_CHAR_FLAG', 'DUPLICATE_KEY']
    data = [columns, name, email, phone, dates, num, t, nullable, spec, dup]
    
    config_df = pd.DataFrame(columns = rules)
    for i in range(0,len(rules)):
        config_df[rules[i]] = data[i]
    
    return config_df

rule_list = []
for i in df3.columns:
    new = []
    new.append(i)
    for j in enumerate(df3[i]):
        if j[1] == 1:
            new.append(df3.iloc[j[0],0])
    rule_list.append(new)

for i in rule_list:
    if i[0] == 'IS_NAME':
        name_cleaning(d, i[1:])
    if i[0] == 'IS_EMAIL':
        email_set(d, i[1:])
    if i[0] == 'IS_MOBILE':
        phone_check(d)
    if i[0] == 'IS_DATE':
        date_set(d, i[1:])
    if i[0] == 'IS_NUMBER':
        numo_set(d, i[1:])
    if i[0] == 'DATE_FORMAT':
        date_set(d, i[1:])
    if i[0] == 'NULL_REPLACE':
        null_replace(d, i[1:])
    if i[0] == 'SPEC_CHAR_FLAG':
        spec_char(d, i[1:])
    else:
        continue
